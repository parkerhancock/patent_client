# generated by datamodel-codegen:
#   filename:  swagger.yaml
#   timestamp: 2025-02-17T22:43:07+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Annotated, List, Optional

from pydantic import BaseModel, Field, RootModel, BeforeValidator

StrToInt = Annotated[int, BeforeValidator(lambda v: int(v) if v else None)]
IntToStr = Annotated[str, BeforeValidator(lambda v: str(v) if v else None)]

class Format(Enum):
    """
    Download format. csv or json
    """

    json = "json"
    csv = "csv"


class CorrespondenceAddressBagItem(BaseModel):
    name_line_one_text: Annotated[
        Optional[str],
        Field(
            None,
            alias="nameLineOneText",
            examples=["Seed IP Law Group LLP/ST (EP ORIGINATING)"],
        ),
    ]
    name_line_two_text: Annotated[
        Optional[str],
        Field(None, alias="nameLineTwoText", examples=["Attn- IP Docket"]),
    ]
    address_line_one_text: Annotated[
        Optional[str],
        Field(
            None, alias="addressLineOneText", examples=["701 FIFTH AVENUE, SUITE 5400"]
        ),
    ]
    address_line_two_text: Annotated[
        Optional[str], Field(None, alias="addressLineTwoText", examples=["Suite 501"])
    ]
    geographic_region_name: Annotated[
        Optional[str],
        Field(None, alias="geographicRegionName", examples=["WASHINGTON"]),
    ]
    geographic_region_code: Annotated[
        Optional[str], Field(None, alias="geographicRegionCode", examples=["WA"])
    ]
    postal_code: Annotated[
        Optional[str], Field(None, alias="postalCode", examples=["98104-7092"])
    ]
    city_name: Annotated[
        Optional[str], Field(None, alias="cityName", examples=["SEATTLE"])
    ]
    country_code: Annotated[
        Optional[str], Field(None, alias="countryCode", examples=["US"])
    ]
    country_name: Annotated[
        Optional[str], Field(None, alias="countryName", examples=["USA"])
    ]
    postal_address_category: Annotated[
        Optional[str],
        Field(None, alias="postalAddressCategory", examples=["commercial"]),
    ]


class ApplicationStatusCodeItem(BaseModel):
    value: Annotated[Optional[str], Field(None, examples=["Utility"])]
    count: Annotated[Optional[int], Field(None, examples=[44673])]


class Facet(BaseModel):
    application_status_code: Annotated[
        Optional[List[ApplicationStatusCodeItem]],
        Field(None, alias="applicationStatusCode"),
    ]


class StatusCodeBagItem(BaseModel):
    application_status_code: Annotated[
        Optional[int], Field(None, alias="applicationStatusCode", examples=[60])
    ]
    """
    Application status code
    """
    application_status_description_text: Annotated[
        Optional[str],
        Field(
            None,
            alias="applicationStatusDescriptionText",
            examples=["Final Rejection Counted, Not Yet Mailed"],
        ),
    ]
    """
    Application status code description
    """


class StatusCodeSearchResponse(BaseModel):
    """
    This json structure represents data fields for status codes search API
    """

    count: Annotated[Optional[int], Field(None, examples=[1])]
    status_code_bag: Annotated[
        Optional[List[StatusCodeBagItem]], Field(None, alias="statusCodeBag")
    ]
    request_identifier: Annotated[
        Optional[str],
        Field(
            None,
            alias="requestIdentifier",
            examples=["07c5c24d-bf8e-458c-9427-a038500d6e98"],
        ),
    ]


class DownloadOptionBagItem(BaseModel):
    mime_type_identifier: Annotated[
        Optional[str], Field(None, alias="mimeTypeIdentifier", examples=["PDF"])
    ]
    download_uri: Annotated[
        Optional[str],
        Field(
            None,
            alias="downloadURI",
            examples=[
                "https://beta-api.uspto.gov/api/v1/patent/application/documents/16123123/LDXBTPQ7XBLUEX3.pdf"
            ],
        ),
    ]
    page_total_quantity: Annotated[
        Optional[int], Field(None, alias="pageTotalQuantity", examples=[2])
    ]


class DocumentBagItem(BaseModel):
    application_number_text: Annotated[
        Optional[str], Field(None, alias="applicationNumberText", examples=[16123123])
    ]
    official_date: Annotated[
        Optional[str],
        Field(None, alias="officialDate", examples=["2020-08-31T01:20:29.000-0400"]),
    ]
    document_identifier: Annotated[
        Optional[str],
        Field(None, alias="documentIdentifier", examples=["LDXBTPQ7XBLUEX3"]),
    ]
    document_code: Annotated[
        Optional[str], Field(None, alias="documentCode", examples=["WFEE"])
    ]
    document_code_description_text: Annotated[
        Optional[str],
        Field(
            None, alias="documentCodeDescriptionText", examples=["Fee Worksheet (SB06)"]
        ),
    ]
    document_direction_category: Annotated[
        Optional[str],
        Field(None, alias="documentDirectionCategory", examples=["INTERNAL"]),
    ]
    download_option_bag: Annotated[
        Optional[List[DownloadOptionBagItem]], Field(None, alias="downloadOptionBag")
    ]


class DocumentBag(BaseModel):
    document_bag: Annotated[
        Optional[List[DocumentBagItem]], Field(None, alias="documentBag")
    ]


class Filter(BaseModel):
    """
    Add filters to your search request by providing filter name and filter value where name in filter request some field in data set.
    """

    name: Annotated[
        Optional[str],
        Field(None, examples=["applicationMetaData.applicationStatusDescriptionText"]),
    ]
    value: Optional[List[str]] = None


class Range(BaseModel):
    """
    Range filter. Provide field from dataset and valueFrom and valueTo. If range filter is for date field, date must be in "yyyy-MM-dd" format
    """

    field: Annotated[
        Optional[str], Field(None, examples=["applicationMetaData.grantDate"])
    ]
    value_from: Annotated[
        Optional[str], Field(None, alias="valueFrom", examples=["2010-08-04"])
    ]
    value_to: Annotated[
        Optional[str], Field(None, alias="valueTo", examples=["2022-08-04"])
    ]

    model_config = {
        "populate_by_name": True,
        "json_encoders": {
            date: lambda v: v.isoformat(),
        },
    }


class Order(str, Enum):
    """
    Sort order. e.g. Asc, ASC, Desc, desc, DESC
    """

    asc = "Asc"
    asc_1 = "asc"
    desc = "Desc"
    desc_1 = "desc"


class Sort(BaseModel):
    """
    Sort you search result by providing field to be sorted and sort order
    """

    field: Annotated[
        Optional[str], Field(None, examples=["applicationMetaData.filingDate"])
    ]
    order: Annotated[Optional[Order], Field(None, examples=["desc"])]
    """
    Sort order. e.g. Asc, ASC, Desc, desc, DESC
    """


class Pagination(BaseModel):
    """
    Pagination information.
    """

    offset: Annotated[int, Field(0, examples=[0], ge=0)]
    """
    Start
    """
    limit: Annotated[int, Field(25, examples=[25], ge=1)]
    """
    Maximum number of patent records to be returned in response
    """


class Facet1(BaseModel):
    value: Optional[str] = None
    count: Optional[int] = None


class EntityStatusData(BaseModel):
    small_entity_status_indicator: Annotated[
        Optional[bool], Field(None, alias="smallEntityStatusIndicator")
    ]
    """
    Indicates whether the applicant qualifies for small entity status
    """
    business_entity_status_category: Annotated[
        Optional[str],
        Field(None, alias="businessEntityStatusCategory", examples=["Undiscounted"]),
    ]
    """
    Status of business entity being established for the purpose of paying a fee such as a filing fee and a maintenance fee
    """


class CorrespondenceAddressBagItem1(BaseModel):
    name_line_one_text: Annotated[
        Optional[str],
        Field(None, alias="nameLineOneText", examples=["STMicroelectronics S.A."]),
    ]
    name_line_two_text: Annotated[
        Optional[str], Field(None, alias="nameLineTwoText", examples=["Electronics"])
    ]
    geographic_region_name: Annotated[
        Optional[str], Field(None, alias="geographicRegionName", examples=["MN"])
    ]
    geographic_region_code: Annotated[
        Optional[str], Field(None, alias="geographicRegionCode", examples=["Minnesota"])
    ]
    city_name: Annotated[
        Optional[str], Field(None, alias="cityName", examples=["Montrouge"])
    ]
    country_code: Annotated[
        Optional[str], Field(None, alias="countryCode", examples=["FR"])
    ]
    country_name: Annotated[
        Optional[str], Field(None, alias="countryName", examples=["FRANCE"])
    ]
    postal_address_category: Annotated[
        Optional[str],
        Field(None, alias="postalAddressCategory", examples=["commercial"]),
    ]


class ApplicantBagItem(BaseModel):
    applicant_name_text: Annotated[
        Optional[str], Field(None, alias="applicantNameText", examples=["John Smith"])
    ]
    first_name: Annotated[
        Optional[str], Field(None, alias="firstName", examples=["John"])
    ]
    middle_name: Annotated[
        Optional[str], Field(None, alias="middleName", examples=["P"])
    ]
    last_name: Annotated[
        Optional[str], Field(None, alias="lastName", examples=["Smith"])
    ]
    preferred_name: Annotated[
        Optional[str], Field(None, alias="preferredName", examples=["John Smith"])
    ]
    name_prefix: Annotated[
        Optional[str], Field(None, alias="namePrefix", examples=["Mr."])
    ]
    name_suffix: Annotated[
        Optional[str], Field(None, alias="nameSuffix", examples=["Jr."])
    ]
    country_code: Annotated[
        Optional[str], Field(None, alias="countryCode", examples=["US"])
    ]
    correspondence_address_bag: Annotated[
        Optional[List[CorrespondenceAddressBagItem1]],
        Field(None, alias="correspondenceAddressBag"),
    ]


class CorrespondenceAddressBagItem2(BaseModel):
    name_line_one_text: Annotated[
        Optional[str],
        Field(None, alias="nameLineOneText", examples=["Pascal  Chevalier"]),
    ]
    name_line_two_text: Annotated[
        Optional[str], Field(None, alias="nameLineTwoText", examples=["Name Two"])
    ]
    geographic_region_name: Annotated[
        Optional[str],
        Field(None, alias="geographicRegionName", examples=["Region Name"]),
    ]
    geographic_region_code: Annotated[
        Optional[str], Field(None, alias="geographicRegionCode", examples=["FR"])
    ]
    city_name: Annotated[
        Optional[str], Field(None, alias="cityName", examples=["Chapareillan"])
    ]
    country_code: Annotated[
        Optional[str], Field(None, alias="countryCode", examples=["FR"])
    ]
    country_name: Annotated[
        Optional[str], Field(None, alias="countryName", examples=["FRANCE"])
    ]
    postal_address_category: Annotated[
        Optional[str],
        Field(None, alias="postalAddressCategory", examples=["commercial"]),
    ]


class InventorBagItem(BaseModel):
    first_name: Annotated[
        Optional[str], Field(None, alias="firstName", examples=["John"])
    ]
    middle_name: Annotated[
        Optional[str], Field(None, alias="middleName", examples=["K"])
    ]
    last_name: Annotated[
        Optional[str], Field(None, alias="lastName", examples=["Smith"])
    ]
    name_prefix: Annotated[
        Optional[str], Field(None, alias="namePrefix", examples=["Mr."])
    ]
    name_suffix: Annotated[
        Optional[str], Field(None, alias="nameSuffix", examples=["Sr."])
    ]
    preferred_name: Annotated[
        Optional[str], Field(None, alias="preferredName", examples=["John Smith"])
    ]
    country_code: Annotated[
        Optional[str], Field(None, alias="countryCode", examples=["US"])
    ]
    inventor_name_text: Annotated[
        Optional[str],
        Field(None, alias="inventorNameText", examples=["Pascal Chevalier"]),
    ]
    correspondence_address_bag: Annotated[
        Optional[List[CorrespondenceAddressBagItem2]],
        Field(None, alias="correspondenceAddressBag"),
    ]


class ApplicationMetaData(BaseModel):
    """
    Represents patent application meta data properties
    """

    national_stage_indicator: Annotated[
        Optional[bool], Field(None, alias="nationalStageIndicator")
    ]
    """
    Indicates whether this application is a national application which entered the national stage from an international PCT application
    """
    entity_status_data: Annotated[
        Optional[EntityStatusData], Field(None, alias="entityStatusData")
    ]
    publication_date_bag: Annotated[
        Optional[List[str]], Field(None, alias="publicationDateBag")
    ]
    publication_sequence_number_bag: Annotated[
        Optional[List[str]], Field(None, alias="publicationSequenceNumberBag")
    ]
    publication_category_bag: Annotated[
        Optional[List[str]], Field(None, alias="publicationCategoryBag")
    ]
    docket_number: Annotated[
        Optional[str],
        Field(None, alias="docketNumber", examples=["12GR10425US01/859063.688"]),
    ]
    first_inventor_to_file_indicator: Annotated[
        Optional[str], Field(None, alias="firstInventorToFileIndicator", examples=["Y"])
    ]
    first_applicant_name: Annotated[
        Optional[str],
        Field(None, alias="firstApplicantName", examples=["STMicroelectronics S.A."]),
    ]
    first_inventor_name: Annotated[
        Optional[str],
        Field(None, alias="firstInventorName", examples=["Pascal Chevalier"]),
    ]
    application_confirmation_number: Annotated[
        Optional[IntToStr],
        Field(None, alias="applicationConfirmationNumber", examples=[1061]),
    ]
    application_status_date: Annotated[
        Optional[str],
        Field(None, alias="applicationStatusDate", examples=["2016-05-18"]),
    ]
    application_status_description_text: Annotated[
        Optional[str],
        Field(
            None, alias="applicationStatusDescriptionText", examples=["Patented Case"]
        ),
    ]
    filing_date: Annotated[
        Optional[str], Field(None, alias="filingDate", examples=["2012-12-19"])
    ]
    """
    The date assigned by the Patent Office that identifies when an application meets certain criteria to qualify as having been filed. Refers to ST.9 INID Code 22.
    """
    effective_filing_date: Annotated[
        Optional[str], Field(None, alias="effectiveFilingDate", examples=["2013-12-12"])
    ]
    """
    The date according to PTO criteria that the patent case qualified as having been 'filed'.  The effective filing date is the same or later than the Filing Date.  The filing date can be changed due to a subsequent action on an application patent case.
    """
    grant_date: Annotated[
        Optional[str], Field(None, alias="grantDate", examples=["2016-06-07"])
    ]
    group_art_unit_number: Annotated[
        Optional[str], Field(None, alias="groupArtUnitNumber", examples=["TTAB"])
    ]
    """
    GAU Code
    """
    application_type_code: Annotated[
        Optional[str], Field(None, alias="applicationTypeCode", examples=["UTL"])
    ]
    """
    Code corresponding to Utility, Plant, Design, or Reissue
    """
    application_type_label_name: Annotated[
        Optional[str],
        Field(None, alias="applicationTypeLabelName", examples=["Utility"]),
    ]
    application_type_category: Annotated[
        Optional[str],
        Field(None, alias="applicationTypeCategory", examples=["electronics"]),
    ]
    invention_title: Annotated[
        Optional[str],
        Field(
            None, alias="inventionTitle", examples=["HETEROJUNCTION BIPOLAR TRANSISTOR"]
        ),
    ]
    patent_number: Annotated[
        Optional[str], Field(None, alias="patentNumber", examples=[9362380])
    ]
    application_status_code: Annotated[
        Optional[int], Field(None, alias="applicationStatusCode", examples=[150])
    ]
    earliest_publication_number: Annotated[
        Optional[str],
        Field(None, alias="earliestPublicationNumber", examples=["US 2014-0167116 A1"]),
    ]
    """
    Publication number corresponding to the earliest publication
    """
    earliest_publication_date: Annotated[
        Optional[str],
        Field(None, alias="earliestPublicationDate", examples=["2014-06-19"]),
    ]
    pct_publication_number: Annotated[
        Optional[str],
        Field(None, alias="pctPublicationNumber", examples=["WO 2009/064413"]),
    ]
    """
    The unique identifier assigned to the publication of an international patent application in the PCT Gazette by the International Bureau (IB) of the World Intellectual Property Organization (WIPO).
    """
    pct_publication_date: Annotated[
        Optional[str], Field(None, alias="pctPublicationDate", examples=["2016-12-16"])
    ]
    international_registration_publication_date: Annotated[
        Optional[str],
        Field(
            None,
            alias="internationalRegistrationPublicationDate",
            examples=["2016-12-16"],
        ),
    ]
    """
    The date that the IPR is published by the International Bureau
    """
    international_registration_number: Annotated[
        Optional[str],
        Field(None, alias="internationalRegistrationNumber", examples=["DM/091304"]),
    ]
    """
    The number assigned by the International Bureau to an international registration upon registering an industrial design, a trademark or other type of IPR in the International Register
    """
    examiner_name_text: Annotated[
        Optional[str], Field(None, alias="examinerNameText", examples=["HUI TSAI JEY"])
    ]
    """
    Name of patent examiner
    """
    class_: Annotated[Optional[str], Field(None, alias="class", examples=[257])]
    """
    The first hierarchical level in the USPC classification schedule
    """
    subclass: Annotated[Optional[str], Field(None, examples=[197000])]
    """
    The second highest hierarchical level  in the USP C classification schedule
    """
    uspc_symbol_text: Annotated[
        Optional[str], Field(None, alias="uspcSymbolText", examples=["257/197000"])
    ]
    """
    The first hierarchical level in the USPC classification schedule/ The second highest hierarchical level in the USP C classification schedule
    """
    customer_number: Annotated[
        Optional[int], Field(None, alias="customerNumber", examples=[38106])
    ]
    """
    Correspondence address of the application inherited from the customer.
    """
    cpc_classification_bag: Annotated[
        Optional[List[str]],
        Field(
            None,
            alias="cpcClassificationBag",
            examples=[
                [
                    "H01L29/66325",
                    "H01L27/0623",
                    "H01L29/7378",
                    "H01L21/8249",
                    "H01L29/737",
                    "H01L29/66242",
                ]
            ],
        ),
    ]
    """
    Collection of Classifications for CPC
    """
    applicant_bag: Annotated[
        Optional[List[ApplicantBagItem]], Field(None, alias="applicantBag")
    ]
    inventor_bag: Annotated[
        Optional[List[InventorBagItem]], Field(None, alias="inventorBag")
    ]


class PatentTermAdjustmentHistoryDataBagItem(BaseModel):
    event_date: Annotated[
        Optional[str], Field(None, alias="eventDate", examples=["2016-06-07"])
    ]
    """
    The date that the symbol was assigned to the patent document
    """
    applicant_day_delay_quantity: Annotated[
        Optional[float], Field(None, alias="applicantDayDelayQuantity", examples=[4])
    ]
    event_description_text: Annotated[
        Optional[str],
        Field(
            None,
            alias="eventDescriptionText",
            examples=["Patent Issue Date Used in PTA Calculation"],
        ),
    ]
    event_sequence_number: Annotated[
        Optional[float], Field(None, alias="eventSequenceNumber", examples=[65])
    ]
    ip_office_day_delay_quantity: Annotated[
        Optional[float], Field(None, alias="ipOfficeDayDelayQuantity", examples=[0])
    ]
    """
    Number of days the UPSTO personnel adjusting the calculation to increase or decrease the patent term adjustment based upon a request for reconsideration of the patent term adjustment.
    """
    originating_event_sequence_number: Annotated[
        Optional[float],
        Field(None, alias="originatingEventSequenceNumber", examples=[0]),
    ]
    pta_pte_code: Annotated[
        Optional[str], Field(None, alias="ptaPteCode", examples=["PTA"])
    ]


class PatentTermAdjustment(BaseModel):
    """
    Patent term adjustment data
    """

    a_delay_quantity: Annotated[
        Optional[float], Field(None, alias="aDelayQuantity", examples=[0])
    ]
    """
    A delays quantity number of adjustments to the term of the patent based upon USPTO delays included in the PTA determination that is mailed as part of the ISSUE NOTIFICATION LETTER.
    """
    adjustment_total_quantity: Annotated[
        Optional[float], Field(None, alias="adjustmentTotalQuantity", examples=[0])
    ]
    """
    Patent term adjustment total quantity number that is a summation of NONOVERLAPPING USPTO DELAYS (+/- PTO MANUAL ADJUSTMENTS) - APPLICANT DELAYS.
    """
    applicant_day_delay_quantity: Annotated[
        Optional[float], Field(None, alias="applicantDayDelayQuantity", examples=[28])
    ]
    """
    Patent term adjustment applicant delays quantity number of the patent term due to the Applicant's failure to engage in reasonable efforts to conclude prosecution of the application for the cumulative period in excess of three
    """
    b_delay_quantity: Annotated[
        Optional[float], Field(None, alias="bDelayQuantity", examples=[0])
    ]
    """
    B delays quantity number of adjustments to the term of the patent based upon the patent failing to issue within three years of the actual filing date of the application at the time that the issue notification letter is generated and an issue date has been established.
    """
    c_delay_quantity: Annotated[
        Optional[float], Field(None, alias="cDelayQuantity", examples=[0])
    ]
    """
    C delays quantity number of adjustments to the term of the patent based upon USPTO delays caused by interference proceedings, secrecy orders, and successful appellate reviews.
    """
    filing_date: Annotated[
        Optional[str], Field(None, alias="filingDate", examples=["2013-12-12"])
    ]
    """
    The date assigned by the Patent Office that identifies when an application meets certain criteria to qualify as having been filed. Refers to ST.9 INID Code 22.
    """
    grant_date: Annotated[
        Optional[str], Field(None, alias="grantDate", examples=["2016-06-07"])
    ]
    non_overlapping_day_quantity: Annotated[
        Optional[float], Field(None, alias="nonOverlappingDayQuantity", examples=[0])
    ]
    """
    Patent term adjustment non overlapping days quantity number of overall summation of the USPTO delays minus any overlapping days.
    """
    overlapping_day_quantity: Annotated[
        Optional[float], Field(None, alias="overlappingDayQuantity", examples=[0])
    ]
    """
    Patent term adjustment overlapping days quantity number that reflects the calculation of overlapping delays consistent with the federal circuit's interpretation.
    """
    ip_office_day_delay_quantity: Annotated[
        Optional[float], Field(None, alias="ipOfficeDayDelayQuantity", examples=[0])
    ]
    """
    Number of days the UPSTO personnel adjusting the calculation to increase or decrease the patent term adjustment based upon a request for reconsideration of the patent term adjustment.
    """
    patent_term_adjustment_history_data_bag: Annotated[
        Optional[List[PatentTermAdjustmentHistoryDataBagItem]],
        Field(None, alias="patentTermAdjustmentHistoryDataBag"),
    ]


class ParentContinuityData(BaseModel):
    first_inventor_to_file_indicator: Annotated[
        Optional[bool],
        Field(None, alias="firstInventorToFileIndicator", examples=[True]),
    ]
    """
    Indicates first inventor to file.
    """
    parent_application_status_code: Annotated[
        Optional[int], Field(None, alias="parentApplicationStatusCode", examples=[159])
    ]
    parent_patent_number: Annotated[
        Optional[str], Field(None, alias="parentPatentNumber", examples=[8968299])
    ]
    parent_application_status_description_text: Annotated[
        Optional[str],
        Field(
            None,
            alias="parentApplicationStatusDescriptionText",
            examples=[
                "Patent Expired Due to NonPayment of Maintenance Fees Under 37 CFR 1.362"
            ],
        ),
    ]
    parent_application_filing_date: Annotated[
        Optional[str],
        Field(None, alias="parentApplicationFilingDate", examples=["2012-05-23"]),
    ]
    parent_application_number_text: Annotated[
        Optional[str],
        Field(None, alias="parentApplicationNumberText", examples=[123123133]),
    ]
    child_application_number_text: Annotated[
        Optional[str],
        Field(None, alias="childApplicationNumberText", examples=[10121016]),
    ]
    claim_parentage_type_code: Annotated[
        Optional[str], Field(None, alias="claimParentageTypeCode", examples=["CODE"])
    ]
    claim_parentage_type_code_description_text: Annotated[
        Optional[str],
        Field(
            None,
            alias="claimParentageTypeCodeDescriptionText",
            examples=["Claims priority from a provisional application"],
        ),
    ]


class ChildContinuityData(BaseModel):
    child_application_status_code: Annotated[
        Optional[float], Field(None, alias="childApplicationStatusCode", examples=[150])
    ]
    parent_application_number_text: Annotated[
        Optional[str],
        Field(None, alias="parentApplicationNumberText", examples=[14104993]),
    ]
    child_application_number_text: Annotated[
        Optional[str],
        Field(None, alias="childApplicationNumberText", examples=[14853719]),
    ]
    """
    Application number of the child application, which is the unique value assigned by the USPTO to a patent application upon receipt
    """
    child_application_status_description_text: Annotated[
        Optional[str],
        Field(
            None,
            alias="childApplicationStatusDescriptionText",
            examples=["Patented Case"],
        ),
    ]
    child_application_filing_date: Annotated[
        Optional[str],
        Field(None, alias="childApplicationFilingDate", examples=["2015-09-14"]),
    ]
    first_inventor_to_file_indicator: Annotated[
        Optional[bool],
        Field(None, alias="firstInventorToFileIndicator", examples=[False]),
    ]
    child_patent_number: Annotated[
        Optional[str], Field(None, alias="childPatentNumber", examples=[9704967])
    ]
    claim_parentage_type_code: Annotated[
        Optional[str], Field(None, alias="claimParentageTypeCode", examples=["DIV"])
    ]
    claim_parentage_type_code_description_text: Annotated[
        Optional[str],
        Field(
            None,
            alias="claimParentageTypeCodeDescriptionText",
            examples=["Claims priority from a provisional application"],
        ),
    ]


class ForeignPriority(BaseModel):
    ip_office_name: Annotated[
        Optional[str], Field(None, alias="ipOfficeName", examples=["FRANCE"])
    ]
    filing_date: Annotated[
        Optional[str], Field(None, alias="filingDate", examples=["2012-12-19"])
    ]
    application_number_text: Annotated[
        Optional[str], Field(None, alias="applicationNumberText", examples=[1262321])
    ]


class AssignorBagItem(BaseModel):
    assignor_name: Annotated[
        Optional[str],
        Field(None, alias="assignorName", examples=["STMICROELECTRONICS SA"]),
    ]
    execution_date: Annotated[
        Optional[str], Field(None, alias="executionDate", examples=["2022-06-30"])
    ]


class AssigneeAddress(BaseModel):
    address_line_one_text: Annotated[
        Optional[str],
        Field(
            None, alias="addressLineOneText", examples=["CHEMIN DU CHAMP-DES-FILLES 39"]
        ),
    ]
    address_line_two_text: Annotated[
        Optional[str],
        Field(None, alias="addressLineTwoText", examples=["1228 PLAN-LES-OUATES"]),
    ]
    city_name: Annotated[
        Optional[str], Field(None, alias="cityName", examples=["GENEVA"])
    ]
    geographic_region_name: Annotated[
        Optional[str], Field(None, alias="geographicRegionName", examples=["CHX"])
    ]
    geographic_region_code: Annotated[
        Optional[str], Field(None, alias="geographicRegionCode")
    ]
    country_name: Annotated[
        Optional[str], Field(None, alias="countryName", examples=["Switzerland"])
    ]
    postal_code: Annotated[
        Optional[str], Field(None, alias="postalCode", examples=[20123])
    ]


class AssigneeBagItem(BaseModel):
    assignee_name_text: Annotated[
        Optional[str],
        Field(None, alias="assigneeNameText", examples=["STMICROELECTRONICS SA"]),
    ]
    assignee_address: Annotated[
        Optional[AssigneeAddress], Field(None, alias="assigneeAddress")
    ]


class CorrespondenceAddressBagItem3(BaseModel):
    correspondent_name_text: Annotated[
        Optional[str],
        Field(
            None, alias="correspondentNameText", examples=["STMICROELECTRONICS, INC."]
        ),
    ]
    address_line_one_text: Annotated[
        Optional[str],
        Field(None, alias="addressLineOneText", examples=["750 CANYON DRIVE"]),
    ]
    address_line_two_text: Annotated[
        Optional[str], Field(None, alias="addressLineTwoText", examples=["SUITE 300"])
    ]
    address_line_three_text: Annotated[
        Optional[str],
        Field(None, alias="addressLineThreeText", examples=["COPPELL, TX 75019"]),
    ]
    address_line_four_text: Annotated[
        Optional[str],
        Field(None, alias="addressLineFourText", examples=["Address Line Four"]),
    ]


class Assignment(BaseModel):
    """
    The collection of national assignments related to a patent
    """

    reel_number: Annotated[
        Optional[IntToStr], Field(None, alias="reelNumber", examples=[60620])
    ]
    """
    1-6 digit number identifies the reel number to be used to locate the assignment on microfilm.
    """
    frame_number: Annotated[
        Optional[IntToStr], Field(None, alias="frameNumber", examples=[769])
    ]
    """
    1-4 digit number that identifies the frame number to be used to locate the first image(page) of the assignment on microfilm.
    """
    reel_and_frame_number: Annotated[
        Optional[str], Field(None, alias="reelAndFrameNumber", examples=["60620/769"])
    ]
    assignment_document_location_uri: Annotated[
        Optional[str],
        Field(
            None,
            alias="assignmentDocumentLocationURI",
            examples=[
                "https://legacy-assignments.uspto.gov/assignments/assignment-pat-060620-0769.pdf"
            ],
        ),
    ]
    page_number: Annotated[
        Optional[int], Field(None, alias="pageNumber", examples=[16])
    ]
    assignment_received_date: Annotated[
        Optional[str],
        Field(None, alias="assignmentReceivedDate", examples=["2022-07-11"]),
    ]
    assignment_recorded_date: Annotated[
        Optional[str],
        Field(None, alias="assignmentRecordedDate", examples=["2022-07-11"]),
    ]
    assignment_mailed_date: Annotated[
        Optional[str],
        Field(None, alias="assignmentMailedDate", examples=["2022-07-28"]),
    ]
    """
    The date an assignment request was mailed to the office or received by the office
    """
    conveyance_text: Annotated[
        Optional[str],
        Field(
            None,
            alias="conveyanceText",
            examples=["ASSIGNMENT OF ASSIGNORS INTEREST (SEE DOCUMENT FOR DETAILS)."],
        ),
    ]
    """
    A description of the nature of the interest conveyed or transaction to be recorded in an assignment. Examples of the types of descriptions `include:` assignment, security agreement, merger, change of name, license, foreclosure, lien,
    """
    assignor_bag: Annotated[
        Optional[List[AssignorBagItem]], Field(None, alias="assignorBag")
    ]
    assignee_bag: Annotated[
        Optional[List[AssigneeBagItem]], Field(None, alias="assigneeBag")
    ]
    correspondence_address_bag: Annotated[
        Optional[List[CorrespondenceAddressBagItem3]],
        Field(None, alias="correspondenceAddressBag"),
    ]


class PowerOfAttorneyAddressBagItem(BaseModel):
    name_line_one_text: Annotated[
        Optional[str],
        Field(
            None,
            alias="nameLineOneText",
            examples=["Seed IP Law Group LLP/STMicroelectronics"],
        ),
    ]
    address_line_one_text: Annotated[
        Optional[str],
        Field(
            None, alias="addressLineOneText", examples=["701 FIFTH AVENUE, SUITE 5400"]
        ),
    ]
    address_line_two_text: Annotated[
        Optional[str],
        Field(None, alias="addressLineTwoText", examples=["Sample Line Two"]),
    ]
    geographic_region_name: Annotated[
        Optional[str],
        Field(None, alias="geographicRegionName", examples=["WASHINGTON"]),
    ]
    geographic_region_code: Annotated[
        Optional[str], Field(None, alias="geographicRegionCode", examples=["WA"])
    ]
    postal_code: Annotated[
        Optional[str], Field(None, alias="postalCode", examples=["98104-7092"])
    ]
    city_name: Annotated[
        Optional[str], Field(None, alias="cityName", examples=["SEATTLE"])
    ]
    country_code: Annotated[
        Optional[str], Field(None, alias="countryCode", examples=["US"])
    ]
    country_name: Annotated[
        Optional[str], Field(None, alias="countryName", examples=["UNITED STATES"])
    ]


class TelecommunicationAddressBagItem(BaseModel):
    telecommunication_number: Annotated[
        Optional[str],
        Field(None, alias="telecommunicationNumber", examples=["206-622-4900"]),
    ]
    extension_number: Annotated[
        Optional[str], Field(None, alias="extensionNumber", examples=[409])
    ]
    telecom_type_code: Annotated[
        Optional[str], Field(None, alias="telecomTypeCode", examples=["TEL"])
    ]


class CustomerNumberCorrespondenceDatum(BaseModel):
    patron_identifier: Annotated[Optional[float], Field(None, alias="patronIdentifier")]
    organization_standard_name: Annotated[
        Optional[str], Field(None, alias="organizationStandardName", examples=[None])
    ]
    power_of_attorney_address_bag: Annotated[
        Optional[List[PowerOfAttorneyAddressBagItem]],
        Field(None, alias="powerOfAttorneyAddressBag"),
    ]
    telecommunication_address_bag: Annotated[
        Optional[List[TelecommunicationAddressBagItem]],
        Field(None, alias="telecommunicationAddressBag"),
    ]


class AttorneyAddressBagItem(BaseModel):
    name_line_one_text: Annotated[
        Optional[str],
        Field(None, alias="nameLineOneText", examples=["SEED IP LAW  GROUP LLP"]),
    ]
    name_line_two_text: Annotated[
        Optional[str], Field(None, alias="nameLineTwoText", examples=["STOCKTON"])
    ]
    address_line_one_text: Annotated[
        Optional[str],
        Field(None, alias="addressLineOneText", examples=["701 FIFTH AVENUE"]),
    ]
    address_line_two_text: Annotated[
        Optional[str], Field(None, alias="addressLineTwoText", examples=["SUITE 5400"])
    ]
    geographic_region_name: Annotated[
        Optional[str],
        Field(None, alias="geographicRegionName", examples=["WASHINGTON"]),
    ]
    geographic_region_code: Annotated[
        Optional[str], Field(None, alias="geographicRegionCode", examples=["WA"])
    ]
    postal_code: Annotated[
        Optional[str], Field(None, alias="postalCode", examples=[98104])
    ]
    city_name: Annotated[
        Optional[str], Field(None, alias="cityName", examples=["SEATTLE"])
    ]
    country_code: Annotated[
        Optional[str], Field(None, alias="countryCode", examples=["US"])
    ]
    country_name: Annotated[
        Optional[str], Field(None, alias="countryName", examples=["UNITED STATES"])
    ]


class TelecommunicationAddressBagItem1(BaseModel):
    telecommunication_number: Annotated[
        Optional[str],
        Field(None, alias="telecommunicationNumber", examples=["206-622-4900"]),
    ]
    extension_number: Annotated[
        Optional[str], Field(None, alias="extensionNumber", examples=[243])
    ]
    telecom_type_code: Annotated[
        Optional[str], Field(None, alias="telecomTypeCode", examples=["TEL"])
    ]


class PowerOfAttorneyBagItem(BaseModel):
    first_name: Annotated[
        Optional[str], Field(None, alias="firstName", examples=["DANIEL"])
    ]
    middle_name: Annotated[
        Optional[str], Field(None, alias="middleName", examples=["D"])
    ]
    last_name: Annotated[
        Optional[str], Field(None, alias="lastName", examples=["O'BRIEN"])
    ]
    name_prefix: Annotated[
        Optional[str], Field(None, alias="namePrefix", examples=["Dr"])
    ]
    name_suffix: Annotated[
        Optional[str], Field(None, alias="nameSuffix", examples=["Jr."])
    ]
    preferred_name: Annotated[Optional[str], Field(None, alias="preferredName")]
    country_code: Annotated[
        Optional[str], Field(None, alias="countryCode", examples=["US"])
    ]
    registration_number: Annotated[
        Optional[str], Field(None, alias="registrationNumber", examples=[65545])
    ]
    active_indicator: Annotated[
        Optional[str], Field(None, alias="activeIndicator", examples=["ACTIVE"])
    ]
    registered_practitioner_category: Annotated[
        Optional[str],
        Field(None, alias="registeredPractitionerCategory", examples=["ATTNY"]),
    ]
    attorney_address_bag: Annotated[
        Optional[List[AttorneyAddressBagItem]], Field(None, alias="attorneyAddressBag")
    ]
    telecommunication_address_bag: Annotated[
        Optional[List[TelecommunicationAddressBagItem1]],
        Field(None, alias="telecommunicationAddressBag"),
    ]


class AttorneyAddressBagItem1(BaseModel):
    name_line_one_text: Annotated[
        Optional[str],
        Field(
            None,
            alias="nameLineOneText",
            examples=["KIILPATRICK TOWNSEND & STOCKTON, LLP"],
        ),
    ]
    name_line_two_text: Annotated[
        Optional[str], Field(None, alias="nameLineTwoText", examples=["TOWNSEND"])
    ]
    address_line_one_text: Annotated[
        Optional[str],
        Field(None, alias="addressLineOneText", examples=["1100 PEACHTREE STREET NE"]),
    ]
    address_line_two_text: Annotated[
        Optional[str], Field(None, alias="addressLineTwoText", examples=["SUITE 2800"])
    ]
    geographic_region_name: Annotated[
        Optional[str], Field(None, alias="geographicRegionName", examples=["GEORGIA"])
    ]
    geographic_region_code: Annotated[
        Optional[str], Field(None, alias="geographicRegionCode", examples=["GA"])
    ]
    postal_code: Annotated[
        Optional[str], Field(None, alias="postalCode", examples=[30309])
    ]
    city_name: Annotated[
        Optional[str], Field(None, alias="cityName", examples=["ATLANTA"])
    ]
    country_code: Annotated[
        Optional[str], Field(None, alias="countryCode", examples=["US"])
    ]
    country_name: Annotated[
        Optional[str], Field(None, alias="countryName", examples=["UNITED STATES"])
    ]


class AttorneyBagItem(BaseModel):
    first_name: Annotated[
        Optional[str], Field(None, alias="firstName", examples=["DANIEL"])
    ]
    middle_name: Annotated[
        Optional[str], Field(None, alias="middleName", examples=["D"])
    ]
    last_name: Annotated[
        Optional[str], Field(None, alias="lastName", examples=["O'BRIEN"])
    ]
    name_prefix: Annotated[
        Optional[str], Field(None, alias="namePrefix", examples=["Dr"])
    ]
    name_suffix: Annotated[
        Optional[str], Field(None, alias="nameSuffix", examples=["Jr."])
    ]
    registration_number: Annotated[
        Optional[str], Field(None, alias="registrationNumber", examples=[65545])
    ]
    active_indicator: Annotated[
        Optional[str], Field(None, alias="activeIndicator", examples=["ACTIVE"])
    ]
    registered_practitioner_category: Annotated[
        Optional[str], Field(None, alias="registeredPractitionerCategory")
    ]
    attorney_address_bag: Annotated[
        Optional[List[AttorneyAddressBagItem1]], Field(None, alias="attorneyAddressBag")
    ]
    telecommunication_address_bag: Annotated[
        Optional[List[TelecommunicationAddressBagItem1]],
        Field(None, alias="telecommunicationAddressBag"),
    ]


class RecordAttorney(BaseModel):
    """
    An attorney selected by the applicant or owner of an intellectual property to represent them before the national office.
    """

    customer_number_correspondence_data: Annotated[
        Optional[CustomerNumberCorrespondenceDatum],
        Field(None, alias="customerNumberCorrespondenceData"),
    ]
    """
    Correspondence address of the application inherited from the customer.
    """
    power_of_attorney_bag: Annotated[
        Optional[List[PowerOfAttorneyBagItem]], Field(None, alias="powerOfAttorneyBag")
    ]
    attorney_bag: Annotated[
        Optional[List[AttorneyBagItem]], Field(None, alias="attorneyBag")
    ]


class PGPubFileMetaData(BaseModel):
    """
    Contains pgpub zip and xml file meta data for an application
    """

    zip_file_name: Annotated[
        Optional[str], Field(None, alias="zipFileName", examples=["ipa240801.zip"])
    ]
    product_identifier: Annotated[
        Optional[str], Field(None, alias="productIdentifier", examples=["APPXML"])
    ]
    file_location_uri: Annotated[
        Optional[str],
        Field(
            None,
            alias="fileLocationURI",
            examples=[
                "https://bulkdata.uspto.gov/data/patent/application/redbook/fulltext/2024/ipa240104.zip"
            ],
        ),
    ]
    file_create_date_time: Annotated[
        Optional[str],
        Field(None, alias="fileCreateDateTime", examples=["2024-08-09:11:30:00"]),
    ]
    xml_file_name: Annotated[
        Optional[str], Field(None, alias="xmlFileName", examples=["ipa240801.xml"])
    ]


class GrantFileMetaData(BaseModel):
    """
    Contains patent grant zip and xml file meta data for an application
    """

    zip_file_name: Annotated[
        Optional[str], Field(None, alias="zipFileName", examples=["ipg240102.zip"])
    ]
    product_identifier: Annotated[
        Optional[str], Field(None, alias="productIdentifier", examples=["PTGRXML"])
    ]
    file_location_uri: Annotated[
        Optional[str],
        Field(
            None,
            alias="fileLocationURI",
            examples=[
                "https://bulkdata.uspto.gov/data/patent/grant/redbook/fulltext/2016/ipg160405.zip"
            ],
        ),
    ]
    file_create_date_time: Annotated[
        Optional[str],
        Field(None, alias="fileCreateDateTime", examples=["2024-08-09:11:30:00"]),
    ]
    xml_file_name: Annotated[
        Optional[str], Field(None, alias="xmlFileName", examples=["ipg160405.xml"])
    ]


class EventData(BaseModel):
    """
    The date the patent case action was recorded.
    """

    event_code: Annotated[
        Optional[str], Field(None, alias="eventCode", examples=["ELC_RVW"])
    ]
    event_description_text: Annotated[
        Optional[str],
        Field(None, alias="eventDescriptionText", examples=["Electronic Review"]),
    ]
    event_date: Annotated[
        Optional[str], Field(None, alias="eventDate", examples=["2018-10-18"])
    ]
    """
    The date the patent case action was recorded.
    """


class Code(Enum):
    number_400 = 400
    number_403 = 403
    number_404 = 404
    number_413 = 413
    number_500 = 500


class Description(Enum):
    bad_request = "Bad Request"
    unauthorized = "Unauthorized"
    not_found = "Not Found"
    payload_too_large = "Payload Too Large"
    internal_server_error = "Internal Server Error"


class Error(BaseModel):
    """
    Object representing the error response
    """

    code: Optional[Code] = None
    description: Optional[Description] = None
    detailed_error: Annotated[
        Optional[str],
        Field(
            None,
            alias="detailedError",
            examples=[
                "No matching records found, refine your search criteria and try again"
            ],
        ),
    ]
    request_identifier: Annotated[
        Optional[str],
        Field(
            None,
            alias="requestIdentifier",
            examples=["07c5c24d-bf8e-458c-9427-a038500d6e98"],
        ),
    ]


class FileDataBagItem(BaseModel):
    file_name: Annotated[
        Optional[str],
        Field(
            None,
            alias="fileName",
            examples=["2001-2010-patent-filewrapper-full-json.zip"],
        ),
    ]
    file_size: Annotated[
        Optional[float], Field(None, alias="fileSize", examples=[1698377311])
    ]
    file_data_from_date: Annotated[
        Optional[str], Field(None, alias="fileDataFromDate", examples=["2001-01-01"])
    ]
    file_data_to_date: Annotated[
        Optional[str], Field(None, alias="fileDataToDate", examples=["2010-12-31"])
    ]
    file_type_text: Annotated[
        Optional[str], Field(None, alias="fileTypeText", examples=["Data"])
    ]
    file_download_uri: Annotated[
        Optional[str],
        Field(
            None,
            alias="fileDownloadURI",
            examples=[
                "https://beta-api.uspto.gov/api/v1/datasets/products/files/PTFWPRE/2001-2010-patent-filewrapper-full-json.zip"
            ],
        ),
    ]
    file_release_date: Annotated[
        Optional[str],
        Field(None, alias="fileReleaseDate", examples=["2025-01-13 08:01:00"]),
    ]
    file_date: Annotated[
        Optional[str],
        Field(None, alias="fileDate", examples=["2001-01-01T00:00:00.000Z"]),
    ]
    file_last_modified_date_time: Annotated[
        Optional[str],
        Field(None, alias="fileLastModifiedDateTime", examples=["2025-01-13 08:01:00"]),
    ]


class ProductFileBag(BaseModel):
    count: Annotated[Optional[int], Field(None, examples=[3])]
    file_data_bag: Annotated[
        Optional[List[FileDataBagItem]], Field(None, alias="fileDataBag")
    ]


class ProductLabelBagItem(BaseModel):
    value: Annotated[Optional[str], Field(None, examples=["PATENT"])]
    count: Annotated[Optional[int], Field(None, examples=[1])]


class ProductDataSetBagItem(BaseModel):
    value: Annotated[Optional[str], Field(None, examples=["Research"])]
    count: Annotated[Optional[int], Field(None, examples=[1])]


class ProductCategoryBagItem(BaseModel):
    value: Annotated[Optional[str], Field(None, examples=["Patent applications"])]
    count: Annotated[Optional[int], Field(None, examples=[1])]


class ProductMimeTypeBagItem(BaseModel):
    value: Annotated[Optional[str], Field(None, examples=["XML"])]
    count: Annotated[Optional[int], Field(None, examples=[1])]


class Facets(BaseModel):
    product_label_bag: Annotated[
        Optional[List[ProductLabelBagItem]], Field(None, alias="productLabelBag")
    ]
    product_data_set_bag: Annotated[
        Optional[List[ProductDataSetBagItem]], Field(None, alias="productDataSetBag")
    ]
    product_category_bag: Annotated[
        Optional[List[ProductCategoryBagItem]], Field(None, alias="productCategoryBag")
    ]
    product_mime_type_bag: Annotated[
        Optional[List[ProductMimeTypeBagItem]], Field(None, alias="productMimeTypeBag")
    ]


class Status413(BaseModel):
    code: Annotated[Optional[str], Field(None, examples=[413])]
    message: Annotated[Optional[str], Field(None, examples=["Payload Too Large"])]
    detailed_message: Annotated[
        Optional[str],
        Field(
            None,
            alias="detailedMessage",
            examples=[
                "Response payload exceeds allowed limit of 6MB, please refine your search criteria or reduce payload size by reducing page size"
            ],
        ),
    ]
    request_identifier: Annotated[
        Optional[str],
        Field(
            None,
            alias="requestIdentifier",
            examples=["07c5c24d-bf8e-458c-9427-a038500d6e98"],
        ),
    ]


class PatentSearchRequest(BaseModel):
    q: Annotated[
        Optional[str],
        Field(None, examples=["applicationMetaData.applicationTypeLabelName:Utility"]),
    ]
    """
    Search by field value or pass opensearch string query syntax
    """
    filters: Optional[List[Filter]] = None
    range_filters: Annotated[Optional[List[Range]], Field(None, alias="rangeFilters")]
    sort: Optional[List[Sort]] = None
    fields: Annotated[
        Optional[List[str]],
        Field(
            None,
            examples=[
                [
                    "applicationNumberText",
                    "correspondenceAddressBag",
                    "applicationMetaData.filingDate",
                ]
            ],
        ),
    ]
    pagination: Optional[Pagination] = None
    facets: Annotated[
        Optional[List[str]],
        Field(
            None,
            examples=[
                [
                    "applicationMetaData.applicationTypeLabelName",
                    "applicationMetaData.applicationStatusCode",
                ]
            ],
        ),
    ]

    model_config = {
        "populate_by_name": True,
        "json_encoders": {
            date: lambda v: v.isoformat(),
        },
    }


class PatentDownloadRequest(BaseModel):
    q: Annotated[
        Optional[str],
        Field(None, examples=["applicationMetaData.applicationTypeLabelName:Utility"]),
    ]
    """
    Search by field value or pass opensearch string query syntax
    """
    filters: Optional[List[Filter]] = None
    range_filters: Annotated[Optional[List[Range]], Field(None, alias="rangeFilters")]
    sort: Optional[List[Sort]] = None
    fields: Annotated[
        Optional[List[str]],
        Field(
            None,
            examples=[
                [
                    "applicationNumberText",
                    "correspondenceAddressBag",
                    "applicationMetaData.filingDate",
                ]
            ],
        ),
    ]
    pagination: Optional[Pagination] = None
    format: Annotated[Optional[Format], Field(None, examples=["json"])]
    """
    Download format. csv or json
    """


class PatentFileWrapperDataBagItem(BaseModel):
    application_number_text: Annotated[
        Optional[str], Field(None, alias="applicationNumberText", examples=[14104993])
    ]
    """
    Free format of application number
    """
    application_meta_data: Annotated[
        Optional[ApplicationMetaData], Field(None, alias="applicationMetaData")
    ]
    correspondence_address_bag: Annotated[
        Optional[List[CorrespondenceAddressBagItem]],
        Field(None, alias="correspondenceAddressBag"),
    ]
    """
    Collection of correspondences
    """
    assignment_bag: Annotated[
        Optional[List[Assignment]], Field(None, alias="assignmentBag")
    ]
    record_attorney: Annotated[
        Optional[RecordAttorney], Field(None, alias="recordAttorney")
    ]
    foreign_priority_bag: Annotated[
        Optional[List[ForeignPriority]], Field(None, alias="foreignPriorityBag")
    ]
    parent_continuity_bag: Annotated[
        Optional[List[ParentContinuityData]], Field(None, alias="parentContinuityBag")
    ]
    child_continuity_bag: Annotated[
        Optional[List[ChildContinuityData]], Field(None, alias="childContinuityBag")
    ]
    patent_term_adjustment_data: Annotated[
        Optional[PatentTermAdjustment], Field(None, alias="patentTermAdjustmentData")
    ]
    event_data_bag: Annotated[
        Optional[List[EventData]], Field(None, alias="eventDataBag")
    ]
    pgpub_document_meta_data: Annotated[
        Optional[PGPubFileMetaData], Field(None, alias="pgpubDocumentMetaData")
    ]
    grant_document_meta_data: Annotated[
        Optional[GrantFileMetaData], Field(None, alias="grantDocumentMetaData")
    ]
    last_ingestion_date_time: Annotated[
        Optional[str],
        Field(None, alias="lastIngestionDateTime", examples=["2024-09-15T21:19:01"]),
    ]


class PatentDataResponse(BaseModel):
    """
    This json structure represents all data fields possible for a patent application. Not all fields mentioned here will be returned in API response, only fields that have data should present in the response.
    """

    count: Annotated[Optional[int], Field(None, examples=[1])]
    patent_file_wrapper_data_bag: Annotated[
        Optional[List[PatentFileWrapperDataBagItem]],
        Field(None, alias="patentFileWrapperDataBag"),
    ]
    facets: Optional[List[Facet]] = None


class StatusCodeSearchRequest(BaseModel):
    q: Annotated[Optional[str], Field(None, examples=["applicationStatusCode:120"])]
    """
    Search by field value or pass opensearch string query syntax
    """
    pagination: Optional[Pagination] = None


class BulkDataProductBagItem(BaseModel):
    product_identifier: Annotated[
        Optional[str], Field(None, alias="productIdentifier", examples=["PTFWPRE"])
    ]
    product_description_text: Annotated[
        Optional[str],
        Field(
            None,
            alias="productDescriptionText",
            examples=[
                "Bibliographic and assignments static patent data compiled into file sets. The Weekly Datasets (10-year increments) can be downloaded in bulk."
            ],
        ),
    ]
    product_title_text: Annotated[
        Optional[str],
        Field(
            None,
            alias="productTitleText",
            examples=["Patent File Wrapper (Bulk Datasets) - Weekly"],
        ),
    ]
    product_frequency_text: Annotated[
        Optional[str], Field(None, alias="productFrequencyText", examples=["WEEKLY"])
    ]
    days_of_week_text: Annotated[
        Optional[str], Field(None, alias="daysOfWeekText", examples=["SUNDAY"])
    ]
    product_label_array_text: Annotated[
        Optional[List[str]], Field(None, alias="productLabelArrayText")
    ]
    product_data_set_array_text: Annotated[
        Optional[List[str]], Field(None, alias="productDataSetArrayText")
    ]
    product_data_set_category_array_text: Annotated[
        Optional[List[str]], Field(None, alias="productDataSetCategoryArrayText")
    ]
    product_from_date: Annotated[
        Optional[date], Field(None, alias="productFromDate", examples=["2001-01-01"])
    ]
    product_to_date: Annotated[
        Optional[date], Field(None, alias="productToDate", examples=["2025-12-31"])
    ]
    product_total_file_size: Annotated[
        Optional[float],
        Field(None, alias="productTotalFileSize", examples=[32511973080]),
    ]
    product_file_total_quantity: Annotated[
        Optional[float], Field(None, alias="productFileTotalQuantity", examples=[3])
    ]
    last_modified_date_time: Annotated[
        Optional[str],
        Field(
            None, alias="lastModifiedDateTime", examples=["2023-12-07T15:52:00.000Z"]
        ),
    ]
    mime_type_identifier_array_text: Annotated[
        Optional[List[str]], Field(None, alias="mimeTypeIdentifierArrayText")
    ]
    product_file_bag: Annotated[
        Optional[ProductFileBag], Field(None, alias="productFileBag")
    ]


class BulkDataProductBag(RootModel[BulkDataProductBagItem]):
    root: BulkDataProductBagItem


class BdssResponseProductBag(BaseModel):
    count: Annotated[Optional[int], Field(None, examples=[25])]
    bulk_data_product_bag: Annotated[
        Optional[List[BulkDataProductBag]], Field(None, alias="bulkDataProductBag")
    ]


class BdssResponseBag(BaseModel):
    count: Annotated[Optional[int], Field(None, examples=[25])]
    bulk_data_product_bag: Annotated[
        Optional[List[BulkDataProductBag]], Field(None, alias="bulkDataProductBag")
    ]
    facets: Optional[Facets] = None
