# ********************************************************************************
# *  WARNING: This code is automatically generated by unasync.py. Do not edit!   *
# ********************************************************************************
import base64
import datetime
import logging
import typing as tp

import httpx

from patent_client import SETTINGS

logger = logging.getLogger(__name__)


class OpsAuthenticationError(Exception):
    pass


class OpsForbiddenError(Exception):
    pass


class OpsFairUseError(Exception):
    pass


class OpsAuth(httpx.Auth):
    requires_response_body = True
    auth_url = "https://ops.epo.org/3.2/auth/accesstoken"

    def __init__(self, key: tp.Optional[str] = None, secret: tp.Optional[str] = None):
        self.key = key
        self.secret = secret
        self.authorization_header = "<unset>"

    def auth_flow(self, request):
        if self.key is None or self.secret is None:
            raise OpsAuthenticationError(
                "EPO OPS requires an API key and secret. See the setup instructions at https://patent-client.readthedocs.io/en/stable/getting_started.html"
            )
        request.headers["Authorization"] = self.authorization_header
        response = yield request

        if response.status_code == 400:
            response = yield self.build_refresh_request()
            if response.status_code != 200:
                logger.debug(f"EPO Authentication Error!\n{response.text}")
                raise OpsAuthenticationError(
                    "Failed to authenticate with EPO OPS! Please check your credentials. See the setup instructions at https://patent-client.readthedocs.io/en/stable/getting_started.html"
                )
            data = response.json()
            self.expires = datetime.datetime.fromtimestamp(int(data["issued_at"]) / 1000) + datetime.timedelta(
                seconds=int(data["expires_in"])
            )
            self.authorization_header = f"Bearer {data['access_token']}"
            request.headers["Authorization"] = self.authorization_header
            yield request

    def build_refresh_request(self):
        token = base64.b64encode(f"{self.key}:{self.secret}".encode())
        return httpx.Request(
            "post",
            self.auth_url,
            headers={"Authorization": token},
            data={"grant_type": "client_credentials"},
        )


ops_auth = OpsAuth(SETTINGS.epo_api_key, SETTINGS.epo_api_secret)
