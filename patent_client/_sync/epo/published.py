# ********************************************************************************
# *  WARNING: This code is automatically generated by unasync.py. Do not edit!   *
# ********************************************************************************
import logging
import typing as tp
from pathlib import Path

import lxml.etree as ET

from ..http_client import PatentClientHttpClient
from .auth import ops_auth
from patent_client import function_cache


logger = logging.getLogger(__name__)


class PublishedBiblioApi:
    http_client = PatentClientHttpClient(auth=ops_auth)

    @classmethod
    @function_cache
    def get_constituents(
        cls,
        number: str,
        doc_type: str = "publication",
        format: str = "docdb",
        constituents: tuple[str] = ("biblio",),
    ) -> ET._Element:
        """Published Data Constituents API
        number: document number to search
        doc_type: document type (application / publication)
        format: document number format (original / docdb / epodoc)
        constituents: what data to retrieve. Can be combined. (biblio / abstract / full-cycle)

        """
        base_url = f"http://ops.epo.org/3.2/rest-services/published-data/{doc_type}/{format}/{number}/"
        if isinstance(constituents, str):
            constituents = (constituents,)
        url = base_url + ",".join(constituents)
        response = cls.http_client.get(url)
        response.raise_for_status()
        return ET.fromstring(response.content)

    @classmethod
    def get_biblio(cls, number: str, doc_type: str = "publication", format: str = "docdb") -> ET._Element:
        """Published Data Bibliographic API
        Provides the bibliographic data of a given publication number.

        number: document number to search
        doc_type: document type (application / publication)
        format: document number format (original / docdb / epodoc)
        """
        return cls.get_constituents(number, doc_type, format, constituents=("biblio",))

    @classmethod
    @function_cache
    def get_abstract(cls, number: str, doc_type: str = "publication", format: str = "docdb") -> ET._Element:
        """Published Data Abstract API
        Provides the abstract of a given publication number.

        number: document number to search
        doc_type: document type (application / publication)
        format: document number format (original / docdb / epodoc)
        """
        return cls.get_constituents(number, doc_type, format, constituents=("abstract",))

    @classmethod
    @function_cache
    def get_full_cycle(cls, number: str, doc_type: str = "publication", format: str = "docdb") -> ET._Element:
        """Published Data Full Cycle API
        Provides a list of bibliographic data objects for a given publication number of all kinds,
        representing the full life cycle of the application underlying the publication number.

        number: document number to search
        doc_type: document type (application / publication)
        format: document number format (original / docdb / epodoc)
        """
        return cls.get_constituents(number, doc_type, format, constituents=("full-cycle",))


class PublishedFulltextApi:
    http_client = PatentClientHttpClient(auth=ops_auth)
    fulltext_jurisdictions = "EP, WO, AT, BE, BG, CA, CH, CY, CZ, DK, EE, ES, FR, GB, GR, HR, IE, IT, LT, LU, MC, MD, ME, NO, PL, PT, RO, RS, SE, SK".split(
        ", "
    )

    @classmethod
    @function_cache
    def get_fulltext_result(
        cls,
        number: str,
        doc_type: str = "publication",
        format: str = "docdb",
        inquiry: str = "fulltext",
    ) -> ET._Element:
        """Published Fulltext API
        number: document number to search
        doc_type: document type (application / publication)
        format: document number format (original / docdb / epodoc)
        inquiry: what data to retrieve. Can be combined. (fulltext / description / claims)

        """
        url = f"http://ops.epo.org/3.2/rest-services/published-data/{doc_type}/{format}/{number}/{inquiry}"
        if number[:2] not in cls.fulltext_jurisdictions:
            raise ValueError(
                f"Fulltext Is Not Available For Country Code {number[:2]}. Fulltext is only available in {', '.join(cls.fulltext_jurisdictions)}"
            )
        response = cls.http_client.get(url)
        response.raise_for_status()
        return ET.fromstring(response.content)

    @classmethod
    @function_cache
    def get_description(cls, number, doc_type="publication", format="docdb") -> ET._Element:
        return cls.get_fulltext_result(number, doc_type="publication", format="docdb", inquiry="description")

    @classmethod
    @function_cache
    def get_claims(cls, number, doc_type="publication", format="docdb") -> ET._Element:
        return cls.get_fulltext_result(number, doc_type="publication", format="docdb", inquiry="claims")


class PublishedSearchApi:
    http_client = PatentClientHttpClient(auth=ops_auth)

    @classmethod
    @function_cache
    def search(cls, query: str, start: int = 1, end: int = 100) -> ET._Element:
        base_url = "http://ops.epo.org/3.2/rest-services/published-data/search"
        range = f"{start}-{end}"
        logger.debug(f"OPS Search Endpoint - Query: {query}\nRange: {start}-{end}")
        response = cls.http_client.get(base_url, params={"Range": range, "q": query})
        return ET.fromstring(response.content)


class PublishedImagesApi:
    http_client = PatentClientHttpClient(auth=ops_auth)

    @classmethod
    @function_cache
    def get_images(cls, number: str, doc_type: str = "publication", format: str = "docdb") -> ET._Element:
        base_url = f"http://ops.epo.org/3.2/rest-services/published-data/{doc_type}/{format}/{number}/images"
        response = cls.http_client.get(base_url)
        return ET.fromstring(response.content)

    @classmethod
    @function_cache
    def get_page_image(
        cls,
        country: str,
        number: str,
        kind: str,
        image_type: str,
        page_number: int,
        image_format="pdf",
        path: tp.Optional[tp.Union[Path, str]] = None,
    ) -> "Path":
        if image_format not in ("pdf", "tiff", "jpeg", "png"):
            raise ValueError(f"Image Format {image_format} Not Supported")

        if image_type == "FullDocument":
            url = f"https://ops.epo.org/3.2/rest-services/published-data/images/{country}/{number}/{kind}/fullimage.{image_format}"
        elif image_type == "Drawing":
            url = f"https://ops.epo.org/3.2/rest-services/published-data/images/{country}/{number}/{kind}/thumbnail.{image_format}"
        elif image_type == "FirstPageClipping":
            url = f"https://ops.epo.org/3.2/rest-services/published-data/images/{country}/{number}/PA/firstpage.{image_format}"
        else:
            raise ValueError(f"Image Type {image_type} Not Supported")

        path = Path(path) if path else Path.cwd()
        if path.is_dir():
            path = path / f"{country}{number}{kind}-{image_type}-{page_number}.{image_format}"

        return cls.http_client.download(url, method="GET", params={"Range": page_number}, path=path)

    @classmethod
    @function_cache
    def get_page_image_from_link(
        cls,
        link,
        page_number,
        image_format="pdf",
        path: tp.Optional[tp.Union[Path, str]] = None,
    ) -> "Path":
        if image_format not in ("pdf", "tiff", "jpeg", "png"):
            raise ValueError(f"Image Format {image_format} Not Supported")
        path = Path(path) if path else Path.cwd()
        if path.is_dir():
            path = path / f'{link.replace("published-data/images/", "").replace("/", "-")}-{page_number}.{image_format}'
        return cls.http_client.download(
            f"https://ops.epo.org/3.2/rest-services/{link}.{image_format}",
            method="GET",
            params={"Range": page_number},
            path=path,
        )


class PublishedApi:
    biblio = PublishedBiblioApi
    fulltext = PublishedFulltextApi
    search = PublishedSearchApi
    images = PublishedImagesApi
