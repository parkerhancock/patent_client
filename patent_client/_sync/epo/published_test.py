# ********************************************************************************
# *  WARNING: This code is automatically generated by unasync.py. Do not edit!   *
# ********************************************************************************
from pathlib import Path

from .published import PublishedApi

fixture_dir = Path(__file__).parent / "fixtures"


class TestPublishedBiblioApi:
    def test_doc_example_biblio(self):
        result = PublishedApi.biblio.get_biblio("EP1000000.A1", format="epodoc")
        doc = result.find(".//{*}exchange-document")
        assert doc.attrib["country"] == "EP"
        assert doc.attrib["doc-number"] == "1000000"
        assert doc.attrib["kind"] == "A1"
        assert doc.find(".//{*}bibliographic-data") is not None

    def test_doc_example_full_cycle(self):
        result = PublishedApi.biblio.get_full_cycle("EP1000000.A1", format="epodoc")
        docs = result.findall(".//{*}exchange-document")
        assert docs[0].attrib["country"] == "EP"
        assert docs[0].attrib["doc-number"] == "1000000"
        assert docs[0].attrib["kind"] == "A1"
        assert docs[0].find(".//{*}bibliographic-data") is not None
        assert docs[1].attrib["country"] == "EP"
        assert docs[1].attrib["doc-number"] == "1000000"
        assert docs[1].attrib["kind"] == "B1"

    def test_doc_example_abstract(self):
        result = PublishedApi.biblio.get_abstract("EP1000000.A1", format="epodoc")
        doc = result.find(".//{*}exchange-document")
        assert doc.attrib["country"] == "EP"
        assert doc.attrib["doc-number"] == "1000000"
        assert doc.attrib["kind"] == "A1"
        assert doc.find(".//{*}abstract") is not None


class TestSearchApi:
    def test_search(self):
        result = PublishedApi.search.search("ti=plastic")
        result_set = result.find(".//{*}biblio-search")
        assert result_set.attrib["total-result-count"] == "10000"
        query = result_set.find(".//{*}query")
        assert query.text == "ti = plastic"
        results = result_set.findall(".//{*}search-result/{*}publication-reference")
        assert len(results) == 100


class TestFullTextApi:
    def test_description(self):
        result = PublishedApi.fulltext.get_description("EP1000000.A1", format="epodoc")
        doc = result.find(".//{*}fulltext-document")
        doc_id = doc.find(".//{*}doc-number")
        assert doc_id.text == "1000000"
        description = doc.find(".//{*}description")
        assert description is not None

    def test_claims(self):
        result = PublishedApi.fulltext.get_claims("EP1000000.A1", format="epodoc")
        doc = result.find(".//{*}fulltext-document")
        doc_id = doc.find(".//{*}doc-number")
        assert doc_id.text == "1000000"
        claims = doc.find(".//{*}claims")
        assert claims is not None


class TestImagesApi:
    def test_get_images(self):
        result = PublishedApi.images.get_images("EP1000000.A1", format="epodoc")
        doc = result.find('.//{*}document-instance[@desc="FullDocument"]')
        assert doc is not None
        assert doc.attrib["number-of-pages"] == "12"

    def test_get_page_image(self, tmp_path):
        result = PublishedApi.images.get_page_image("EP", "1000000", "A1", "FullDocument", 1, path=tmp_path)
        assert result.exists()
        assert result.stat().st_size > 0

    def test_get_page_image_from_link(self, tmp_path):
        result = PublishedApi.images.get_page_image_from_link(
            "published-data/images/EP/1000000/PA/firstpage", 1, "png", path=tmp_path
        )
        assert result.exists()
        assert result.stat().st_size > 0
